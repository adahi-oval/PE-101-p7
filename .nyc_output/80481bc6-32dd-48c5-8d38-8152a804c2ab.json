{"/home/usuario/ejerciciosPE/p7/src/rational.ts":{"path":"/home/usuario/ejerciciosPE/p7/src/rational.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":26}},"2":{"start":{"line":8,"column":8},"end":{"line":8,"column":23}},"3":{"start":{"line":9,"column":8},"end":{"line":9,"column":27}},"4":{"start":{"line":18,"column":8},"end":{"line":22,"column":9}},"5":{"start":{"line":19,"column":23},"end":{"line":19,"column":28}},"6":{"start":{"line":20,"column":12},"end":{"line":20,"column":32}},"7":{"start":{"line":21,"column":12},"end":{"line":21,"column":23}},"8":{"start":{"line":23,"column":8},"end":{"line":23,"column":19}},"9":{"start":{"line":32,"column":8},"end":{"line":32,"column":60}},"10":{"start":{"line":39,"column":21},"end":{"line":39,"column":55}},"11":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"12":{"start":{"line":41,"column":12},"end":{"line":41,"column":29}},"13":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"14":{"start":{"line":44,"column":12},"end":{"line":44,"column":31}},"15":{"start":{"line":46,"column":8},"end":{"line":46,"column":22}},"16":{"start":{"line":53,"column":8},"end":{"line":53,"column":50}},"17":{"start":{"line":61,"column":23},"end":{"line":61,"column":61}},"18":{"start":{"line":62,"column":21},"end":{"line":62,"column":53}},"19":{"start":{"line":63,"column":21},"end":{"line":63,"column":65}},"20":{"start":{"line":64,"column":26},"end":{"line":64,"column":37}},"21":{"start":{"line":66,"column":23},"end":{"line":66,"column":50}},"22":{"start":{"line":67,"column":8},"end":{"line":67,"column":65}},"23":{"start":{"line":77,"column":18},"end":{"line":77,"column":69}},"24":{"start":{"line":78,"column":8},"end":{"line":78,"column":29}},"25":{"start":{"line":86,"column":8},"end":{"line":86,"column":86}},"26":{"start":{"line":96,"column":8},"end":{"line":96,"column":43}},"27":{"start":{"line":99,"column":0},"end":{"line":99,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":28},"end":{"line":10,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":20},"end":{"line":24,"column":5}},"line":17},"2":{"name":"(anonymous_2)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":24},"end":{"line":33,"column":5}},"line":31},"3":{"name":"(anonymous_3)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":10},"end":{"line":47,"column":5}},"line":38},"4":{"name":"(anonymous_4)","decl":{"start":{"line":52,"column":4},"end":{"line":52,"column":5}},"loc":{"start":{"line":52,"column":10},"end":{"line":54,"column":5}},"line":52},"5":{"name":"(anonymous_5)","decl":{"start":{"line":60,"column":4},"end":{"line":60,"column":5}},"loc":{"start":{"line":60,"column":20},"end":{"line":69,"column":5}},"line":60},"6":{"name":"(anonymous_6)","decl":{"start":{"line":75,"column":4},"end":{"line":75,"column":5}},"loc":{"start":{"line":75,"column":20},"end":{"line":79,"column":5}},"line":75},"7":{"name":"(anonymous_7)","decl":{"start":{"line":85,"column":4},"end":{"line":85,"column":5}},"loc":{"start":{"line":85,"column":21},"end":{"line":87,"column":5}},"line":85},"8":{"name":"(anonymous_8)","decl":{"start":{"line":94,"column":4},"end":{"line":94,"column":5}},"loc":{"start":{"line":94,"column":20},"end":{"line":97,"column":5}},"line":94}},"branchMap":{"0":{"loc":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},{"start":{"line":40,"column":8},"end":{"line":42,"column":9}}],"line":40},"1":{"loc":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},{"start":{"line":43,"column":8},"end":{"line":45,"column":9}}],"line":43}},"s":{"0":1,"1":1,"2":18,"3":18,"4":4,"5":7,"6":7,"7":7,"8":4,"9":2,"10":2,"11":2,"12":1,"13":2,"14":1,"15":2,"16":1,"17":2,"18":2,"19":2,"20":2,"21":2,"22":2,"23":1,"24":1,"25":2,"26":1,"27":1},"f":{"0":18,"1":4,"2":2,"3":2,"4":1,"5":2,"6":1,"7":2,"8":1},"b":{"0":[1,1],"1":[1,1]},"inputSourceMap":{"version":3,"file":"/home/usuario/ejerciciosPE/p7/src/rational.ts","sources":["/home/usuario/ejerciciosPE/p7/src/rational.ts"],"names":[],"mappings":";;;AAAA,MAAa,QAAQ;IACA;IAAoB;IAAvC,YAAmB,GAAW,EAAS,KAAa;QAAjC,QAAG,GAAH,GAAG,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAQ;IACpD,CAAC;IAED;;;;;MAKE;IACK,GAAG,CAAC,GAAW,EAAE,KAAa;QACnC,OAAM,KAAK,KAAK,CAAC,EAAE,CAAC;YAClB,IAAI,IAAI,GAAG,KAAK,CAAC;YACjB,KAAK,GAAG,GAAG,GAAG,KAAK,CAAC;YACpB,GAAG,GAAG,IAAI,CAAC;QACb,CAAC;QAED,OAAO,GAAG,CAAC;IACb,CAAC;IACD;;;;;MAKE;IACK,GAAG,CAAC,MAAc,EAAE,MAAc;QAEvC,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAEtD,CAAC;IAGD;;;MAGE;IACK,GAAG;QAER,IAAI,MAAM,GAAa,IAAI,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAE1D,IAAG,IAAI,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC;YAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;QAAC,CAAC;QACrC,IAAG,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC;YAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,CAAA;QAAC,CAAC;QAEzC,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;MAGE;IACK,GAAG;QACR,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5C,CAAC;IAED;;;;MAIE;IACK,GAAG,CAAC,UAAoB;QAE7B,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;QACtD,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9C,MAAM,IAAI,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;QAE1D,MAAM,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC;QAE9B,0EAA0E;QAC1E,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAE3C,OAAO,IAAI,QAAQ,CAAC,SAAS,GAAG,MAAM,EAAE,MAAM,GAAG,MAAM,CAAC,CAAC;QAAA,CAAC;IAC5D,CAAC;IAED;;;;MAIE;IACK,GAAG,CAAC,UAAoB;QAC7B,qDAAqD;QACrD,IAAI,GAAG,GAAa,IAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,KAAK,CAAC,CAAA;QACvE,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAED;;;;MAIE;IACK,IAAI,CAAC,UAAoB;QAC9B,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAA;IAC/E,CAAC;IAAA,CAAC;IAEF;;;;MAIE;IACK,GAAG,CAAC,UAAoB;QAC7B,0DAA0D;QAC1D,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC;IACrC,CAAC;CAEF;AAvGD,4BAuGC;AAAA,CAAC","sourcesContent":["export class Rational {\n  constructor(public num: number, public denom: number) {\n  }\n\n  /**\n   * Calcula el máximo común divisor (MCD) de el numerador y denominador de un número racional para encontrar la fracción indivisible.\n   * @param num El numerador del número racional.\n   * @param denom El denominador del número racional.\n   * @returns El máximo común divisor (MCD) de los dos números.\n  */\n  public mcd(num: number, denom: number): number {\n    while(denom !== 0) {\n      let temp = denom;\n      denom = num % denom;\n      num = temp;\n    }\n\n    return num;\n  }\n  /**\n   * Calcula el mínimo común múltiplo de los denominadores de dos número racionales.\n   * @param denom1 El denominador del primer número.\n   * @param denom2 El denominador del segundo número.\n   * @returns El mínimo común multiplo de los dos.\n  */\n  public mcm(denom1: number, denom2: number): number {\n\n    return (denom1 * denom2) / this.mcd(denom1, denom2);\n\n  }\n\n\n  /**\n   * Calcula el valor absoluto del numero tipo Rational dado.\n   * @returns Nuevo número con su numerador y denominador siendo positivos.\n  */\n  public abs(): Rational {\n\n    let result: Rational = new Rational(this.num, this.denom);\n\n    if(this.num < 0) { result.num *= -1 }\n    if(this.denom < 0) { result.denom *= -1 }\n\n    return result;\n  }\n\n  /**\n   * Calcula el inverso multiplicativo del número tipo Rational dado.\n   * @returns El mismo número con su numerador y denominador intercambiados.\n  */\n  public inv(): Rational {\n    return new Rational(this.denom, this.num);\n  }\n\n  /**\n   * Suma dos números racionales.\n   * @param otherRatio el otro numero racional\n   * @returns El resultado de la suma como un nuevo número racional.\n  */\n  public add(otherRatio: Rational): Rational {\n\n    const minmul = this.mcm(this.denom, otherRatio.denom);\n    const num1 = this.num * (minmul / this.denom);\n    const num2 = otherRatio.num * (minmul / otherRatio.denom);\n\n    const numResult = num1 + num2;\n\n    // Simplificamos con el maximo comun divisor para la fraccion indivisible.\n    const maxdiv = this.mcd(numResult, minmul);\n\n    return new Rational(numResult / maxdiv, minmul / maxdiv);;\n  }\n\n  /**\n   * Resta dos números racionales.\n   * @param otherRatio El otro número Racional.\n   * @returns El resultado de la resta como un nuevo número racional.\n  */\n  public sub(otherRatio: Rational): Rational {\n    // Multiplicar el segundo número por -1 y luego sumar\n    let aux: Rational = new Rational(otherRatio.num * -1, otherRatio.denom)\n    return this.add(aux);\n  }\n\n  /**\n   * Multiplica dos números racionales.\n   * @param otherRatio El otro numero racional\n   * @returns El resultado de la multiplicación como un nuevo número racional.\n  */\n  public mult(otherRatio: Rational): Rational{\n    return new Rational(this.num * otherRatio.num, this.denom * otherRatio.denom)    \n  };\n\n  /**\n   * Divide dos números racionales.\n   * @param otherRatio el otro numero racional\n   * @returns El resultado de la división como un nuevo número racional.\n  */\n  public div(otherRatio: Rational): Rational {\n    // Invertir el segundo número racional y luego multiplicar\n    return this.mult(otherRatio.inv());\n  }\n\n};"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9c9ee9a4cae48cffe0df6f4faab877c99e4548e8","contentHash":"a92a6c3fcc9ff1d7362d7988a47173be1199cf0051599d81379d0eb60cdac4ec"},"/home/usuario/ejerciciosPE/p7/src/complex.ts":{"path":"/home/usuario/ejerciciosPE/p7/src/complex.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":25}},"2":{"start":{"line":8,"column":8},"end":{"line":8,"column":25}},"3":{"start":{"line":9,"column":8},"end":{"line":9,"column":35}},"4":{"start":{"line":17,"column":8},"end":{"line":17,"column":99}},"5":{"start":{"line":25,"column":18},"end":{"line":25,"column":82}},"6":{"start":{"line":26,"column":8},"end":{"line":26,"column":29}},"7":{"start":{"line":34,"column":8},"end":{"line":34,"column":99}},"8":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"9":{"start":{"line":43,"column":12},"end":{"line":43,"column":59}},"10":{"start":{"line":45,"column":8},"end":{"line":45,"column":99}},"11":{"start":{"line":48,"column":0},"end":{"line":48,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":33},"end":{"line":10,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":22},"end":{"line":18,"column":5}},"line":16},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":22},"end":{"line":27,"column":5}},"line":24},"3":{"name":"(anonymous_3)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":23},"end":{"line":35,"column":5}},"line":33},"4":{"name":"(anonymous_4)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":22},"end":{"line":46,"column":5}},"line":41}},"branchMap":{"0":{"loc":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},{"start":{"line":42,"column":8},"end":{"line":44,"column":9}}],"line":42}},"s":{"0":1,"1":1,"2":27,"3":27,"4":6,"5":3,"6":3,"7":3,"8":3,"9":1,"10":2,"11":1},"f":{"0":27,"1":6,"2":3,"3":3,"4":3},"b":{"0":[1,2]},"inputSourceMap":{"version":3,"file":"/home/usuario/ejerciciosPE/p7/src/complex.ts","sources":["/home/usuario/ejerciciosPE/p7/src/complex.ts"],"names":[],"mappings":";;;AAAA,MAAa,OAAO;IACC;IAAqB;IAAxC,YAAmB,IAAY,EAAS,SAAiB;QAAtC,SAAI,GAAJ,IAAI,CAAQ;QAAS,cAAS,GAAT,SAAS,CAAQ;IAAG,CAAC;IAC7D;;;;MAIE;IACK,GAAG,CAAC,YAAqB;QAC9B,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;IAC7F,CAAC;IAED;;;;MAIE;IACK,GAAG,CAAC,YAAqB;QAC9B,IAAI,GAAG,GAAY,IAAI,OAAO,CAAC,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;QAEpF,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAED;;;;MAIE;IACK,IAAI,CAAC,YAAqB;QAC/B,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;IAC7F,CAAC;IAED;;;;MAIE;IACK,GAAG,CAAC,YAAqB;QAC9B,IAAI,YAAY,CAAC,SAAS,KAAK,CAAC,EAAE,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACjD,CAAC;QACD,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;IAC7F,CAAC;CACF;AA1CD,0BA0CC","sourcesContent":["export class Complex {\n  constructor(public body: number, public imaginary: number) {}\n  /**\n   * Suma dos números complejos.\n   * @param otherComplex el otro numero complejo\n   * @returns El resultado de la suma como un nuevo número complejo.\n  */\n  public add(otherComplex: Complex): Complex {\n    return new Complex(this.body + otherComplex.body, this.imaginary + otherComplex.imaginary);\n  }\n\n  /**\n   * Resta dos números complejos.\n   * @param otherComplex El otro número complejo.\n   * @returns El resultado de la resta como un nuevo número complejo.\n  */\n  public sub(otherComplex: Complex): Complex {\n    let aux: Complex = new Complex(otherComplex.body * -1, otherComplex.imaginary * -1);\n\n    return this.add(aux);\n  }\n\n  /**\n   * Multiplica dos números complejos.\n   * @param otherComplex El otro numero complejo\n   * @returns El resultado de la multiplicación como un nuevo número complejo.\n  */\n  public mult(otherComplex: Complex): Complex {\n    return new Complex(this.body * otherComplex.body, this.imaginary * otherComplex.imaginary);\n  }\n\n  /**\n   * Divide dos números complejos.\n   * @param otherComplex El otro número complejo.\n   * @returns El resultado de la división como un nuevo número complejo.\n  */\n  public div(otherComplex: Complex): Complex {\n    if (otherComplex.imaginary === 0) {\n      throw new Error('No se puede dividir entre 0');\n    }\n    return new Complex(this.body / otherComplex.body, this.imaginary / otherComplex.imaginary);\n  }\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b604bcc50596b5a230a510d92327267a22587e4b","contentHash":"3cecc8198c0e2db73de32e6eee67099e8d7a092f710cff5b7062b39c889b04e1"},"/home/usuario/ejerciciosPE/p7/src/ejercicio-1.ts":{"path":"/home/usuario/ejerciciosPE/p7/src/ejercicio-1.ts","statementMap":{"0":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"1":{"start":{"line":10,"column":0},"end":{"line":10,"column":25}},"2":{"start":{"line":11,"column":18},"end":{"line":11,"column":38}},"3":{"start":{"line":24,"column":8},"end":{"line":24,"column":48}},"4":{"start":{"line":25,"column":8},"end":{"line":25,"column":33}},"5":{"start":{"line":28,"column":0},"end":{"line":28,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":26},"end":{"line":26,"column":5}},"line":20}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":2,"4":2,"5":1},"f":{"0":2},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ejerciciosPE/p7/src/ejercicio-1.ts","sources":["/home/usuario/ejerciciosPE/p7/src/ejercicio-1.ts"],"names":[],"mappings":";AAAA;;;;;;EAME;;;AAEF,uCAAoC;AAGpC;;GAEG;AACH,MAAa,OAAQ,SAAQ,iBAAO;IAId;IAHpB;;OAEG;IACH,YAAoB,QAAkB;QACpC;;WAEG;QACH,KAAK,CAAC,QAAQ,CAAC,GAAG,GAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAJpB,aAAQ,GAAR,QAAQ,CAAU;IAKtC,CAAC;CACF;AAVD,0BAUC","sourcesContent":["/*\nDesarrolle los siguientes ejercicios en su proyecto TypeScript asociado a la práctica y empuje los cambios al repositorio GitHub correspondiente, una vez haya finalizado:\n\n    Suponga que parte de las clases Rational y Complex de prácticas anteriores, las cuales permiten operar (suma, resta, división y multiplicación) con números racionales y complejos, respectivamente. Escriba un adaptador de racionales que le permita llevar a cabo operaciones aritméticas entre complejos y racionales.\n\nRecuerde que deberá incluir la documentación haciendo uso de TypeDoc, así como seguir una metodología TDD/BDD utilizando el framework de pruebas Mocha y la librería de aserciones Chai. También trate de comprobar el nivel de cubrimiento de su código mediante Instanbul, así como hacer un seguimiento de dicho cubrimiento con Coveralls. Se valorará positivamente el hecho de contar con flujos de trabajo de Github para ejecutar las pruebas y enviar datos de cubrimiento a Coveralls. Como entrega de esta tarea deberá indicar, de nuevo, el enlace a dicho repositorio GitHub con los ejercicios solicitados.\n*/\n\nimport { Complex } from \"./complex\";\nimport { Rational } from \"./rational\";\n\n/**\n * Clase que representa un racional como un complejo\n */\nexport class Adapter extends Complex {\n  /**\n   * Constructor de la clase, se le pasa un racional y toma la división de sus partes como parte real del numero complejo, y 0 como parte imaginaria.\n   */\n  constructor(private rational: Rational) {\n    /**\n     * Tomamos la división entre el numerador y denominador como parte real, y 0 como parte imaginaria al ser un numero racional\n     */\n    super(rational.num/rational.denom, 0);\n  }\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8d216dc28f62ef218451bf9daf41c94848706d5d","contentHash":"ddc22c154dbf8bcf5b0424e6141a316306c032accf3f74db7d6afeebfa6389c6"}}